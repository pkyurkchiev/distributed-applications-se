openapi: 3.0.0
info:
  description: 'This is a sample Petstore server.  You can find

    out more about Swagger at

    [http://swagger.io](http://swagger.io) or on

    [irc.freenode.net, #swagger](http://swagger.io/irc/).

    '
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: https://petstore.swagger.io/v2
tags:
- name: pet
  description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /pet:
    post:
      tags:
      - pet
      summary: Create a new resource via /pet
      operationId: addPet
      responses:
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example: &id001
                id: 123
                name: Rex
                category:
                  id: 1
                  name: Dogs
                photoUrls:
                - https://example.com/photo.jpg
                tags:
                - id: 1
                  name: friendly
                status: available
        '201':
          description: Resource created successfully
          content: null
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      description: Performs the POST operation on /pet.
    put:
      tags:
      - pet
      summary: Update an existing resource at /pet
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                type: object
        '200':
          description: Successful operation
          content: null
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      description: Performs the PUT operation on /pet.
  /pet/findByStatus:
    get:
      tags:
      - pet
      summary: Retrieve resources using criteria at /pet/findByStatus
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - available
            - pending
            - sold
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                type: object
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Retrieve resources using criteria at /pet/findByTags
      description: Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
          content:
            application/json:
              schema:
                type: object
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Retrieve a resource or list from /pet/{petId}
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: object
      security:
      - api_key: []
    post:
      tags:
      - pet
      summary: Create a new resource via /pet/{petId}
      operationId: updatePetWithForm
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example: *id001
        '201':
          description: Resource created successfully
          content: null
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
      description: Performs the POST operation on /pet/{petId}.
    delete:
      tags:
      - pet
      summary: Delete a resource from /pet/{petId}
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        required: false
        schema:
          type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: object
        '200':
          description: Successful operation
          content: null
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      description: Performs the DELETE operation on /pet/{petId}.
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: Create a new resource via /pet/{petId}/uploadImage
      operationId: uploadFile
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '201':
          description: Resource created successfully
          content: null
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      description: Performs the POST operation on /pet/{petId}/uploadImage.
  /store/inventory:
    get:
      tags:
      - store
      summary: Retrieve a resource or list from /store/inventory
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Create a new resource via /store/order
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: &id003
                id: 1
                username: user123
                firstName: Ivan
                lastName: Petrov
                email: ivan@example.com
                password: securePass123
                phone: '+359888123456'
                userStatus: 1
        '201':
          description: Resource created successfully
          content: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
      description: Performs the POST operation on /store/order.
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Retrieve a resource or list from /store/order/{orderId}
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
          maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example: &id002
                id: 10
                petId: 123
                quantity: 2
                shipDate: '2025-05-15T10:00:00Z'
                status: placed
                complete: false
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example: *id002
    delete:
      tags:
      - store
      summary: Delete a resource from /store/order/{orderId}
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example: *id002
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example: *id002
        '200':
          description: Successful operation
          content: null
  /user:
    post:
      tags:
      - user
      summary: Create a new resource via /user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '201':
          description: Resource created successfully
          content: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Create a new resource via /user/createWithArray
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '201':
          description: Resource created successfully
          content: null
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      description: Performs the POST operation on /user/createWithArray.
  /user/createWithList:
    post:
      tags:
      - user
      summary: Create a new resource via /user/createWithList
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '201':
          description: Resource created successfully
          content: null
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      description: Performs the POST operation on /user/createWithList.
  /user/login:
    get:
      tags:
      - user
      summary: Retrieve a resource or list from /user/login
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
      description: Performs the GET operation on /user/login.
  /user/logout:
    get:
      tags:
      - user
      summary: Retrieve a resource or list from /user/logout
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '200':
          description: Successful operation
          content: null
      description: Performs the GET operation on /user/logout.
  /user/{username}:
    get:
      tags:
      - user
      summary: Retrieve a resource or list from /user/{username}
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
      description: Performs the GET operation on /user/{username}.
    put:
      tags:
      - user
      summary: Update an existing resource at /user/{username}
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      responses:
        '400':
          description: Invalid user supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '200':
          description: Successful operation
          content: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
      - user
      summary: Delete a resource from /user/{username}
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: *id003
        '200':
          description: Successful operation
          content: null
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
